# @package _global_
config:
  CHECKPOINT:
    DIR: "supervised_spatial_resnet18_swappedon_SineGrating2019_checkpoints"
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 5 # in units of epochs
  DATA:
    NUM_DATALOADER_WORKERS: 8
    TRAIN:
      DATA_SOURCES: [disk_folder]
      DATA_PATHS: ["/data5/chengxuz/imagenet_raw/train"]
      LABEL_SOURCES: [disk_folder]
      LABEL_TYPE: standard # for supervised learning
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 256
      TRANSFORMS:
        - name: RandomResizedCrop
          size: 224
        - name: RandomHorizontalFlip
        - name: ColorJitter
          brightness: 0.4
          contrast: 0.4
          saturation: 0.4
          hue: 0.4
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
    TEST:
      DATA_SOURCES: [disk_folder]
      DATA_PATHS: ["/data5/chengxuz/imagenet_raw/validation"]
      LABEL_SOURCES: [disk_folder]
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 256
      TRANSFORMS:
        - name: Resize
          size: 256
        - name: CenterCrop
          size: 224
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
  MODEL:
    TRUNK:
      NAME: spatial_resnet18
      TRUNK_PARAMS:
        position_dir: "/mnt/fs6/eshedm/spacetorch/positions/supervised_resnet18/resnet18_retinotopic_init_swappedon_SineGrating2019"
    HEAD:
      PARAMS: [
        ["mlp", {"dims": [512, 1000]}],
        ["identity", {}]
      ]
  LOSS:
    name: cross_entropy_spatial_correlation_loss
    cross_entropy_spatial_correlation_loss:
      ignore_index: -1
      temperature: 1.0
      neighborhoods_per_batch: 1
      layer_weights:
        layer1_0: 0.25
        layer1_1: 0.25
        layer2_0: 0.25
        layer2_1: 0.25
        layer3_0: 0.25
        layer3_1: 0.25
        layer4_0: 0.25
        layer4_1: 0.25
  OPTIMIZER:
      name: sgd
      weight_decay: 0.0001
      momentum: 0.9
      num_epochs: 105
      nesterov: True
      regularize_bn: False
      regularize_bias: True
      param_schedulers:
        lr:
          auto_lr_scaling: # learning rate is automatically scaled based on batch size
            auto_scale: true
            base_value: 0.1
            base_lr_batch_size: 256 # learning rate of 0.1 is used for batch size of 256
          name: multistep
          # We want the learning rate to drop by 1/10
          # at epochs [30, 60, 90, 100]
          milestones: [30, 60, 90, 100] # epochs at which to drop the learning rate (N vals)
          values: [0.1, 0.01, 0.001, 0.0001, 0.00001] # the exact values of learning rate (N+1 vals)
          update_interval: epoch
  METERS:
    name: accuracy_list_meter
    accuracy_list_meter:
      num_meters: 1
      topk_values: [1, 5]
  TRAINER:
    TRAIN_STEP_NAME: custom_train_step
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 1
    NUM_PROC_PER_NODE: 1 # 1 GPU
    RUN_ID: auto
  MACHINE:
    DEVICE: gpu
  VERBOSE: True
  LOG_FREQUENCY: 500
  TEST_ONLY: False
  TEST_EVERY_NUM_EPOCH: 1
  TEST_MODEL: True
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: fork
  TENSORBOARD_SETUP:
    USE_TENSORBOARD: true
